<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HuShengBin’s blog</title>
  
  <subtitle>码渣的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hsb786.github.io/"/>
  <updated>2018-04-10T12:16:09.396Z</updated>
  <id>https://hsb786.github.io/</id>
  
  <author>
    <name>HuShengBin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反转链表</title>
    <link href="https://hsb786.github.io/2018/04/10/T16/"/>
    <id>https://hsb786.github.io/2018/04/10/T16/</id>
    <published>2018-04-10T12:14:31.000Z</published>
    <updated>2018-04-10T12:16:09.396Z</updated>
    
    <content type="html"><![CDATA[<p>或者直接用Stack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   /**</span><br><span class="line"> * 维护两个节点，一个指向当前节点，一个指向下一个节点 </span><br><span class="line"> * 缺点，需要new 对象，占用内存</span><br><span class="line"> * @author: husb</span><br><span class="line"> * @date: 2018年4月10日 下午7:44:22</span><br><span class="line"> */</span><br><span class="line">private static ListNode reverseList(ListNode head) &#123;</span><br><span class="line">ListNode result = new ListNode(head.data);</span><br><span class="line">ListNode t;</span><br><span class="line">while (head.next != null) &#123;</span><br><span class="line">t = result;</span><br><span class="line">result = new ListNode(head.next.data);</span><br><span class="line">result.next = t;</span><br><span class="line">head = head.next;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Description: 需要维护三个节点，当前，前一个，下一个</span><br><span class="line"> * @author: husb   </span><br><span class="line"> * @date: 2018年4月10日 下午7:57:58 </span><br><span class="line"> */</span><br><span class="line">private static ListNode reverseList2(ListNode head) &#123;</span><br><span class="line">ListNode result = null;</span><br><span class="line">ListNode t = head;</span><br><span class="line">ListNode preNode = null;</span><br><span class="line">while (t != null) &#123;</span><br><span class="line">ListNode nextNode = t.next;</span><br><span class="line">if (nextNode == null) &#123;</span><br><span class="line">result = t;</span><br><span class="line">&#125;</span><br><span class="line">t.next = preNode;</span><br><span class="line">preNode = t;</span><br><span class="line">t = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;或者直接用Stack&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp
      
    
    </summary>
    
    
      <category term="剑指Offer" scheme="https://hsb786.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>链表中倒数第K个节点</title>
    <link href="https://hsb786.github.io/2018/04/10/T15/"/>
    <id>https://hsb786.github.io/2018/04/10/T15/</id>
    <published>2018-04-10T12:13:03.000Z</published>
    <updated>2018-04-10T12:14:07.798Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   /**</span><br><span class="line"> * 维护两个节点，后一个在前一个的后k位。</span><br><span class="line"> * 之后一起走，如果后一个节点为最后一个节点就停下</span><br><span class="line"> * @author: husb   </span><br><span class="line"> * @date: 2018年4月10日 下午7:29:09 </span><br><span class="line"> */</span><br><span class="line">public static ListNode findKthNodeFromEnd(ListNode head, int k) &#123;</span><br><span class="line">ListNode node2 = head;</span><br><span class="line">int i = 1;</span><br><span class="line">if(k&lt;=0) &#123;</span><br><span class="line">System.out.println(&quot;必须从1开始&quot;);</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">while (i++ &lt; k) &#123;</span><br><span class="line">if (node2.next == null) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">node2 = node2.next;</span><br><span class="line">&#125;</span><br><span class="line">while (node2.next != null) &#123;</span><br><span class="line">head = head.next;</span><br><span class="line">node2 = node2.next;</span><br><span class="line">&#125;</span><br><span class="line">return head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="剑指Offer" scheme="https://hsb786.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>调整数组顺序使奇数位于偶数之前</title>
    <link href="https://hsb786.github.io/2018/04/10/T14/"/>
    <id>https://hsb786.github.io/2018/04/10/T14/</id>
    <published>2018-04-10T12:10:37.000Z</published>
    <updated>2018-04-10T12:15:16.812Z</updated>
    
    <content type="html"><![CDATA[<p><strong>快速排序的思想</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  /**</span><br><span class="line">    * 快速排序的思想</span><br><span class="line">    * 左边一个指针向右移，遇到偶数停止；</span><br><span class="line">    * 右边一直指针向左移，遇到奇数停止。</span><br><span class="line">    * 两个值交换</span><br><span class="line">    * @author: husb   </span><br><span class="line">    * @date: 2018年4月10日 下午7:12:45 </span><br><span class="line">    */</span><br><span class="line">private static void reorderOddEven(int[] arr) &#123;</span><br><span class="line">    int left = -1;</span><br><span class="line">    int right = arr.length ;</span><br><span class="line">    while (left != right&amp;&amp;left&lt;=right) &#123;</span><br><span class="line">        while(arr[++left]%2!=0&amp;&amp;left&lt;arr.length-1);</span><br><span class="line">        while(arr[--right]%2==0&amp;&amp;right&gt;=0);</span><br><span class="line">        if(left&lt;right) &#123;</span><br><span class="line">            int t=arr[left];</span><br><span class="line">            arr[left]=arr[right];</span><br><span class="line">            arr[right]=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;快速排序的思想&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="剑指Offer" scheme="https://hsb786.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>在O(1)时间内删除链表节点</title>
    <link href="https://hsb786.github.io/2018/04/10/T13/"/>
    <id>https://hsb786.github.io/2018/04/10/T13/</id>
    <published>2018-04-10T12:04:16.000Z</published>
    <updated>2018-04-10T12:15:11.238Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> *  由于时间复杂度要求为O(1)，</span><br><span class="line"> * 只能将加一个节点的值复制到要删除的节点，之后再将下一个节点删除</span><br><span class="line"> * @author: husb   </span><br><span class="line"> * @date: 2018年4月10日 下午3:43:23</span><br><span class="line"> */</span><br><span class="line">public static void deleteNode(ListNode head, ListNode node) &#123;</span><br><span class="line">//若为头节点，则将头节点设为head.next</span><br><span class="line">if (node == head) &#123;</span><br><span class="line">head = head.next;</span><br><span class="line">//若为未节点，只能遍历了</span><br><span class="line">&#125; else if (node.next == null) &#123;</span><br><span class="line">ListNode t=head;</span><br><span class="line">while(t.next!=node) &#123;</span><br><span class="line">t=t.next;</span><br><span class="line">&#125;</span><br><span class="line">t.next=null;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//若为中间节点，则将下个节点的值复制到要删除的阶段，并且移除一个节点</span><br><span class="line">node.data = node.next.data;</span><br><span class="line">node.next = node.next.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="剑指Offer" scheme="https://hsb786.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>二进制中1的个数</title>
    <link href="https://hsb786.github.io/2018/04/10/T10/"/>
    <id>https://hsb786.github.io/2018/04/10/T10/</id>
    <published>2018-04-10T08:11:44.000Z</published>
    <updated>2018-04-10T08:28:42.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数，输入一个整数，输出该整数二进制表示中1的个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Description: n&amp;(n-1)，将二进制表示中的最低位的1变为0</span><br><span class="line"> * @author: husb   </span><br><span class="line"> * @date: 2018年4月10日 下午3:23:02 </span><br><span class="line"> */</span><br><span class="line">private static int numberOfOne(int n) &#123;</span><br><span class="line">int count=0;</span><br><span class="line">while(n!=0) &#123;</span><br><span class="line">n=n&amp;(n-1);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;请实现一个函数，输入一个整数，输出该整数二进制表示中1的个数。&lt;/p&gt;
&lt;figure class=&quot;highlight p
      
    
    </summary>
    
    
      <category term="剑指Offer" scheme="https://hsb786.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>旋转数组的最小数字</title>
    <link href="https://hsb786.github.io/2018/04/10/T08/"/>
    <id>https://hsb786.github.io/2018/04/10/T08/</id>
    <published>2018-04-10T08:11:33.000Z</published>
    <updated>2018-04-10T08:28:32.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。<br>输入一个递增排序数组的一个旋转，输出旋转数组的最小元素。 </p><p><strong>旋转数组的特点：</strong></p><ol><li>旋转之后的数组可以分为两个排序的子数组，且前面的子数组的元素都大于或等于后面子数组的元素。 </li><li>最小或者最大元素位于两个子数组的分界</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 由于旋转数组的特点，前一个数组一定大于后一个数组。数组内部是升序的。</span><br><span class="line"> * 所以就可以使用二分查找。</span><br><span class="line"> * 定义minIndex为0，highIndex为length-1</span><br><span class="line"> * 若中间位大于array[minIndex]，则代表中间位处于前面部分,将minIndex设为midIndex；</span><br><span class="line"> * 小于则处于后面部分,将highIndex设为midIndex</span><br><span class="line"> * 最终minIndex位于前一个数组的最后一位，highIndex位于后一个数组的第一位</span><br><span class="line"> * 显然最小值就是highIndex所在的值。</span><br><span class="line"> * 特殊情况，但minIndex与highIndex上的值相等时，无法判断中间值是在前，还是在后。</span><br><span class="line"> * 所以只能用顺序查找</span><br><span class="line"> * @author: husb   </span><br><span class="line"> * @date: 2018年4月10日 下午2:56:26 </span><br><span class="line"> */</span><br><span class="line">public static int findMin(int[] array) &#123;</span><br><span class="line">int lowIndex = 0;</span><br><span class="line">int highIndex = array.length - 1;</span><br><span class="line">int midIndex = (lowIndex + highIndex) / 2;</span><br><span class="line">// 当代查找数组第一位大于最后一位时，代表是旋转数组</span><br><span class="line">while (array[lowIndex] &gt;= array[highIndex]) &#123;</span><br><span class="line">// 临界条件 前面最后一位，后面第一位。 后面第一位就是最小值</span><br><span class="line">if (highIndex - lowIndex == 1) &#123;</span><br><span class="line">return array[highIndex];</span><br><span class="line">&#125;</span><br><span class="line">// 当左下标的元素等于右下标的元素时，无法判断中间位是位于前面还是后面的。</span><br><span class="line">// 只能用顺序查找</span><br><span class="line">if (array[lowIndex] == array[highIndex]) &#123;</span><br><span class="line">return findMinInOrder(array, lowIndex, highIndex);</span><br><span class="line">&#125;</span><br><span class="line">// 当中间位大于前面第一位时，代表处于前面</span><br><span class="line">if (array[midIndex] &gt; array[lowIndex]) &#123;</span><br><span class="line">lowIndex = midIndex;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// 否则处于后面</span><br><span class="line">highIndex = midIndex;</span><br><span class="line">&#125;</span><br><span class="line">// 计算中间位</span><br><span class="line">midIndex = (lowIndex + highIndex) / 2;</span><br><span class="line">&#125;</span><br><span class="line">//已排好序，返回低位即可</span><br><span class="line">return array[lowIndex];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Description: 当有重复元素的时候，无法确定中间的元素是前面的还是后面的</span><br><span class="line"> * @author: husb</span><br><span class="line"> * @date: 2018年4月10日 下午2:33:52</span><br><span class="line"> */</span><br><span class="line">private static int findMinInOrder(int[] array, int lowIndex, int highIndex) &#123;</span><br><span class="line">int result = array[lowIndex];</span><br><span class="line">for (int i = lowIndex + 1; i &lt;= highIndex; i++) &#123;</span><br><span class="line">if (result &gt; array[i]) &#123;</span><br><span class="line">result = array[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。&lt;br&gt;输入一个递增排序数组的一个旋转，输出旋转数组的最小
      
    
    </summary>
    
    
      <category term="剑指Offer" scheme="https://hsb786.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>用两个队列实现一个栈</title>
    <link href="https://hsb786.github.io/2018/04/10/T0701/"/>
    <id>https://hsb786.github.io/2018/04/10/T0701/</id>
    <published>2018-04-10T08:11:19.000Z</published>
    <updated>2018-04-10T08:28:23.590Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Queue方法: </span><br><span class="line"> * offer() 添加一个元素，失败则返回false </span><br><span class="line"> * pool() 移除并返回队列头部元素，无则返回null </span><br><span class="line"> * peek() 返回头部元素  无则返回null</span><br><span class="line"> */</span><br><span class="line">private static Queue&lt;Object&gt; queue1 = new LinkedList&lt;&gt;();</span><br><span class="line">private static Queue&lt;Object&gt; queue2 = new LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">private static void push(Object obj) &#123;</span><br><span class="line">if (!queue1.isEmpty()) &#123;</span><br><span class="line">queue1.offer(obj);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">queue2.offer(obj);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;入栈:&quot; + obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Description: 将一个队列里的数据都剪切给另一个队列中，只保留最后一位。</span><br><span class="line"> * 这样弹出的数据就是栈尾数据</span><br><span class="line"> * @author: husb   </span><br><span class="line"> * @date: 2018年4月10日 下午1:55:11 </span><br><span class="line"> */</span><br><span class="line">private static void pop() &#123;</span><br><span class="line">if (queue1.isEmpty() &amp;&amp; queue2.isEmpty()) &#123;</span><br><span class="line">System.out.println(&quot;栈里没有数据&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if (queue1.isEmpty()) &#123;</span><br><span class="line">while (queue2.size() &gt; 1) &#123;</span><br><span class="line">queue1.offer(queue2.poll());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;出栈:&quot; + queue2.poll());</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">while (queue1.size() &gt; 1) &#123;</span><br><span class="line">queue2.offer(queue1.poll());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;出栈:&quot; + queue1.poll());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="剑指Offer" scheme="https://hsb786.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="https://hsb786.github.io/2018/04/10/T07/"/>
    <id>https://hsb786.github.io/2018/04/10/T07/</id>
    <published>2018-04-10T08:10:52.000Z</published>
    <updated>2018-04-10T08:28:03.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>用两个栈实现一个队列。队列的声明如下：请实现他的两个函数appendTail和deleteHead,分别完成在队列尾部插入节点和在队列头部删除节点的功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private static Stack&lt;Object&gt; stack1 = new Stack&lt;Object&gt;();</span><br><span class="line">private static Stack&lt;Object&gt; stack2 = new Stack&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Description: stack1用来存放压入的元素</span><br><span class="line"> * @author: husb   </span><br><span class="line"> * @date: 2018年4月10日 下午1:19:07 </span><br><span class="line"> */</span><br><span class="line">public static void appendTail(Object item) &#123;</span><br><span class="line">stack1.push(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void deleteHead() &#123;</span><br><span class="line">//当stack2中有数据，直接弹出</span><br><span class="line">if (!stack2.isEmpty()) &#123;</span><br><span class="line">System.out.println(&quot;栈顶:&quot; + stack2.pop());</span><br><span class="line">return;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//stack2压入stack1弹出的数据,这样stack2就是一个队列</span><br><span class="line">while (!stack1.isEmpty()) &#123;</span><br><span class="line">stack2.push(stack1.pop());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!stack2.isEmpty()) &#123;</span><br><span class="line">System.out.println(&quot;栈顶:&quot; + stack2.pop());</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(&quot;栈中没有元素&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;用两个栈实现一个队列。队列的声明如下：请实现他的两个函数appendTail和deleteHead,分别完成在队列尾部插入节
      
    
    </summary>
    
    
      <category term="剑指Offer" scheme="https://hsb786.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>替换空格</title>
    <link href="https://hsb786.github.io/2018/04/10/T04/"/>
    <id>https://hsb786.github.io/2018/04/10/T04/</id>
    <published>2018-04-10T08:08:27.000Z</published>
    <updated>2018-04-10T08:27:52.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数，将一个字符串中的空格替换成“%20”。</p><p>例如，当字符串为We Are Happy.则经过替换之后的字符串We%20Are%20Happy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * beginIndex记录比较起始下标，spaceIndex记录空格下标。</span><br><span class="line"> * 添加beginIndex到spaceIndex的数据到StringBuilder中。</span><br><span class="line"> * beginIndex设为spaceIndex；spaceIndex重新计算</span><br><span class="line"> * @author: husb   </span><br><span class="line"> * @date: 2018年4月10日 下午12:26:55 </span><br><span class="line"> */</span><br><span class="line">public static String replaceSpace(String str) &#123;</span><br><span class="line">//一开始想到的办法，一个字符一个字符的比，</span><br><span class="line">//这样会创建多个string对象,String.valueOf()内部是通过new String()来实现的。</span><br><span class="line">/*</span><br><span class="line"> * char[] chars = str.toCharArray(); StringBuilder sb = new StringBuilder(); for</span><br><span class="line"> * (char c : chars) &#123; sb.append(c == &apos; &apos; ? &quot;%20&quot; : String.valueOf(c)); &#125;</span><br><span class="line"> */</span><br><span class="line">StringBuilder sb = new StringBuilder();</span><br><span class="line">int beginIndex = 0;</span><br><span class="line">int spaceIndex = str.indexOf(&quot; &quot;, beginIndex);</span><br><span class="line">while (spaceIndex &gt; 0) &#123;</span><br><span class="line">sb.append(str.substring(beginIndex, spaceIndex)).append(&quot;%20&quot;);</span><br><span class="line">beginIndex = spaceIndex + 1;</span><br><span class="line">spaceIndex = str.indexOf(&quot; &quot;, beginIndex);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(str.substring(beginIndex, str.length()));</span><br><span class="line">return sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;请实现一个函数，将一个字符串中的空格替换成“%20”。&lt;/p&gt;
&lt;p&gt;例如，当字符串为We Are Happy.则经过替换之
      
    
    </summary>
    
    
      <category term="剑指Offer" scheme="https://hsb786.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>二维数组的查找</title>
    <link href="https://hsb786.github.io/2018/04/10/T03/"/>
    <id>https://hsb786.github.io/2018/04/10/T03/</id>
    <published>2018-04-10T04:01:22.000Z</published>
    <updated>2018-04-10T08:27:44.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Description: 从左下角开始比，查找的数字大于遍历值右移；查找的数字小于遍历值上移</span><br><span class="line"> * @author: husb   </span><br><span class="line"> * @date: 2018年4月10日 上午11:55:27 </span><br><span class="line"> */</span><br><span class="line">public static boolean find(int targer, int[][] array) &#123;</span><br><span class="line">int rows = array.length;</span><br><span class="line">int columns = array[0].length;</span><br><span class="line">int i = rows - 1, j = 0;</span><br><span class="line">while (targer != array[i][j]) &#123;</span><br><span class="line">if (targer &gt; array[i][j]) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">if (i &lt; 0 || j &lt; 0 || i &gt; rows || j &gt; columns) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维
      
    
    </summary>
    
    
      <category term="剑指Offer" scheme="https://hsb786.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>threadPool</title>
    <link href="https://hsb786.github.io/2018/04/10/threadPool/"/>
    <id>https://hsb786.github.io/2018/04/10/threadPool/</id>
    <published>2018-04-10T02:13:01.000Z</published>
    <updated>2018-04-10T10:11:54.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Executor框架"><a href="#Executor框架" class="headerlink" title="Executor框架"></a>Executor框架</h2><p>Exexutor框架是一个根据一组执行策略调用，调度，执行和控制的异步任务的框架，可以用来控制线程的启动、执行和关闭，可以简化并发编程的操作。无限制的创建线程会引起应用程序内存溢出。所以创建一个线程池是个更好的解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。Executor框架包括：线程池、Executor、Exexutors、ExecutorService、CompletionService、Future、Callable等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Executor框架&quot;&gt;&lt;a href=&quot;#Executor框架&quot; class=&quot;headerlink&quot; title=&quot;Executor框架&quot;&gt;&lt;/a&gt;Executor框架&lt;/h2&gt;&lt;p&gt;Exexutor框架是一个根据一组执行策略调用，调度，执行和控制的异步任务的
      
    
    </summary>
    
    
      <category term="爪哇" scheme="https://hsb786.github.io/tags/%E7%88%AA%E5%93%87/"/>
    
  </entry>
  
  <entry>
    <title>java基础总结</title>
    <link href="https://hsb786.github.io/2018/04/09/javaBase/"/>
    <id>https://hsb786.github.io/2018/04/09/javaBase/</id>
    <published>2018-04-09T13:28:54.000Z</published>
    <updated>2018-04-10T10:28:38.152Z</updated>
    
    <content type="html"><![CDATA[<p><strong>初始化顺序</strong></p><ol><li>父类（静态变量，静态语句块）</li><li>子类（静态变量，静态语句块）</li><li>父类（实例变量，普通语句块）</li><li>父类（构造函数）</li><li>子类（实例变量，普通语句块）</li><li>子类（构造函数）</li></ol><hr><p><strong>Object</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public final native Class&lt;?&gt; getClass()</span><br><span class="line"></span><br><span class="line">public native int hashCode()</span><br><span class="line"></span><br><span class="line">public boolean equals(Object obj)</span><br><span class="line"></span><br><span class="line">protected native Object clone() throws CloneNotSupportedException</span><br><span class="line"></span><br><span class="line">public String toString()</span><br><span class="line"></span><br><span class="line">public final native void notify()</span><br><span class="line"></span><br><span class="line">public final native void notifyAll()</span><br><span class="line"></span><br><span class="line">public final native void wait(long timeout) throws InterruptedException</span><br><span class="line"></span><br><span class="line">public final void wait(long timeout, int nanos) throws InterruptedException</span><br><span class="line"></span><br><span class="line">public final void wait() throws InterruptedException</span><br><span class="line"></span><br><span class="line">protected void finalize() throws Throwable &#123;&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>异常</strong></p><p>Throwable可以用来表示任何可以作为异常抛出的类，分为两种：Error和Exception。其中Error用来表示JVM无法处理的错误，Exception分为两种：</p><ol><li><strong>受检异常（checked exception）</strong>：需要try…catch…语句捕获并进行处理，并且可以从一场恢复</li><li><strong>非受检异常（unchecked exception）</strong>：是程序运行时错误，例如除0会引发Arithmetic Exceptino，此时程序崩溃并且无法恢复 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;初始化顺序&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;父类（静态变量，静态语句块）&lt;/li&gt;
&lt;li&gt;子类（静态变量，静态语句块）&lt;/li&gt;
&lt;li&gt;父类（实例变量，普通语句块）&lt;/li&gt;
&lt;li&gt;父类（构造函数）&lt;/li&gt;
&lt;li&gt;子类（实例变量，普通语
      
    
    </summary>
    
    
      <category term="爪哇" scheme="https://hsb786.github.io/tags/%E7%88%AA%E5%93%87/"/>
    
  </entry>
  
  <entry>
    <title>需要注意的一些东西</title>
    <link href="https://hsb786.github.io/2018/04/09/needFocus/"/>
    <id>https://hsb786.github.io/2018/04/09/needFocus/</id>
    <published>2018-04-09T05:53:41.000Z</published>
    <updated>2018-04-10T10:11:11.905Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>Streams</strong></p><ul><li>引入的原因<ul><li>声明性方式处理数据集合</li><li>透明的进行处理，提高性能  </li></ul></li><li>流与集合<ul><li>集合与流的差异就在于什么时候进行计算<ul><li>集合是内存中的数据结构，包含数据结构中目前所有的值</li><li>流的元素则是按需计算/生存</li></ul></li><li>遍历数据的方式<ul><li>集合使用Collection接口，需要用户去做迭代，称为外部迭代</li><li>流的Streams库使用内部迭代  </li></ul></li></ul></li><li>流的使用<ul><li>一个数据源（如集合）来执行一个查询</li><li>一个中间操作链，形成一条流的流水线</li><li>一个终端操作，执行流水线，并能生产结果</li></ul></li><li>流的操作类型<ul><li><strong>Intermediate</strong> : 一个流后面跟随零个或多个intermediate操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是<em>惰性化的</em>，也就是说，仅仅调用到这类方法，并没有真正开始流的遍历</li><li><strong>Terminal</strong> ： 一个流只能有一个terminal操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的<em>最后一根操作</em>。terminal操作的执行，<em>才会真正开始流的变量</em>  </li></ul></li></ul><hr><p><strong>happens-before</strong></p><p>在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系<br>需要注意的是，上面提到的两个操作可以是在不同线程之间的，而且并不意味着前一个操作必须要在后一个操作之前执行，仅仅要求前一个操作的执行结果对后一个操作可见  </p><ul><li>happends-before规则<ul><li>程序顺序规则： 单个线程中的每个操作，happens-before于该线程中的任意后续操作</li><li>监视器锁规则： 对一个锁的解锁，happens-before于随后对这个锁的加锁</li><li>volatile变量规则： 对一个volatile变量的写，happends-before于任意后续对这个volatile变量的读  </li><li>传递性： 如果A happeens-before B，且 B happeend-before C，那么A happeens-before C  </li><li>join规则： 如果线程A执行操作ThreadB.join()成功返回，那么线程B中的任意操作happeens-before与线程A从ThreadB.join()操作成功返回  </li></ul></li></ul><hr><p><strong>fail-fast</strong></p><p>fail-fast机制是java集合(Collection)中的一种错误机制。当多个线程对同一集合的内容进行操作时，就可能会产生fail-fast事件。  </p><p>例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，产生fail-fast事件  </p><p>要了解fail-fast机制，我们首先要对ConcurrentModificationException 异常有所了解。当方法检测到对象的并发修改，但不允许这种修改时就抛出该异常。同时需要注意的是，该异常不会始终指出对象已经由不同线程并发修改，如果单线程违反了规则，同样也有可能会抛出改异常。<br>诚然，迭代器的快速失败行为无法得到保证，它不能保证一定会出现该错误，但是快速失败操作会尽最大努力抛出ConcurrentModificationException异常</p><p>当使用fail-fast iterator对Collection或对Map进行操作过程中尝试直接修改Collection/Map的内容时，即使是在单线程下运行，java.util.ConcurrentModificationException异常也将抛出  </p><p>Iterator是工作在一个独立的线程，并且拥有一个mutex锁。<em>Iterator被创建之后会建立一个指向原来对象的单链索引表，当原来对象发生变化时，这个索引表的内容不会同步该表，所以当索引指针往后移动的时候就找不到要迭代的对象，所以按照fail-fast原则Iterator会马上抛出ConsurrentModificationException异常</em>。</p><p>所以Iterator在工作的时候是不允许被迭代的对象被改变的。但你可以使用Iterator本身的方法remove()来删除对象，Iteraror.remove()方法会在删除当前迭代对象的同时维护索引的一致性。</p><hr><p><strong>数据库三大范式</strong></p><ol><li>1NF：字段不可再分</li><li>2NF：主键依赖，一张表里的数据，必须是跟主键相关的</li><li>3NF：任意两个表不能出现重复的非主键字段</li></ol><hr><p><strong>设计模式六大原则</strong></p><p><strong>单一职责(Single Responsibility Principle)</strong>：一个类只负责一个功能领域中的相应职责</p><p><strong>开闭(Open-Closed Principle)</strong>：对扩展开放，对修改关闭</p><p><strong>里氏替换(Liskov Subsitution Principle)</strong>：子类能出现在基类出现的地方</p><p><strong>依赖倒置(Dependency Inversion Principle)</strong>：针对接口编程，而不是针对实现类编程</p><p><strong>接口隔离(Interface Segregation Principle)</strong>：使用多个专门的接口，而不使用单一的总接口</p><p><strong>迪米特(Law of Demeter)</strong>：一个类尽可能少的与其它类发生相互作用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Streams&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入的原因&lt;ul&gt;
&lt;li&gt;声明性方式处理数据集合&lt;/li&gt;
&lt;li&gt;透明的进行处理，提高性能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流与集合&lt;ul&gt;
&lt;li&gt;集合与流的差异就在于
      
    
    </summary>
    
    
      <category term="爪哇" scheme="https://hsb786.github.io/tags/%E7%88%AA%E5%93%87/"/>
    
  </entry>
  
  <entry>
    <title>记录一些容易忘记的东西</title>
    <link href="https://hsb786.github.io/2018/04/09/easyForget/"/>
    <id>https://hsb786.github.io/2018/04/09/easyForget/</id>
    <published>2018-04-09T00:42:41.000Z</published>
    <updated>2018-04-10T10:10:26.930Z</updated>
    
    <content type="html"><![CDATA[<hr><p>接口不可以实现接口，可以继承多个接口</p><p>抽象类可以继承具体类</p><p>static不能被重写，重写是运行时动态绑定的</p><p>static变量发生在静态解析阶段，此时已经将字段的符号引用转换成了内存引用，将它与对应的类关联在了一起</p><p>子类构造方法默认会寻找父类无参构造方法，若没有，编译不通过</p><p>抽象方法必须为public否则protected，缺省情况下默认为public</p><p>java8中接口可以含有default方法和static方法</p><p>volatile 禁止指令重排序： 添加内存屏障，保证前面已经完成，后面都没开始</p><p>内部类访问外部类      外部类.this.成员XX</p><p>重载静态绑定，根据参数的静态类型而不是实际类型作为判断依据的</p><p>java的8中基本类型，除了float和double之外，其它6种都实现了常量池</p><p>boolean类型不允许进行任何类型的转换处理</p><p>java7以后，常量池被放入到堆空间中。导致Intern()函数的功能不同。intern()检查常量池时候存在该字符串，存在的话就直接返回；否则返回首次在堆中声明的相同字符串的引用</p><p>ArrayList 默认容器 10                HashMap   16</p><p>newInstance 低效率，只能调用<em>无参</em>构造。<br>将new这个方式分解为两步： 首先调用class的加载方式加载某个类，然后实例化  </p><p>HashSet底层借用HashMap  </p><blockquote><p>private static final Object PRESENT=new Object();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    return map.put(e, PRESENT)==null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>字符只有在内存中才会形成，其它都是以字节的方式进行的</p><p>强引用： Object obj=new Object()，只要引用还在，就不会被回收<br>软引用： 内存不够才会被回收<br>弱引用： 下一次垃圾收集器工作时会被回收。<br>虚引用： 随时可能被回收，目的是能在这个对象被回收时收到一个系统通知</p><p>内加载器： JVM动态加载所需的类。  委托、可见、单一。<br>交给父加载器；父加载器加载的类子加载器都能看到；一个类只能被一个加载一次</p><p>每个对象有两个队列： 就绪队列、阻塞队列</p><p>ReentrantLock结合Condition可以有选择性地进行通知，在调度上更加灵活</p><p>指令重排序： 编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段</p><p>null可以强制转换为任何java类类型<br>其返回值还是null，可以调用static方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;接口不可以实现接口，可以继承多个接口&lt;/p&gt;
&lt;p&gt;抽象类可以继承具体类&lt;/p&gt;
&lt;p&gt;static不能被重写，重写是运行时动态绑定的&lt;/p&gt;
&lt;p&gt;static变量发生在静态解析阶段，此时已经将字段的符号引用转换成了内存引用，将它与对应的类关联在了一起&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="爪哇" scheme="https://hsb786.github.io/tags/%E7%88%AA%E5%93%87/"/>
    
  </entry>
  
  <entry>
    <title>区别</title>
    <link href="https://hsb786.github.io/2018/04/09/distinguish/"/>
    <id>https://hsb786.github.io/2018/04/09/distinguish/</id>
    <published>2018-04-08T23:48:41.000Z</published>
    <updated>2018-04-10T10:10:22.942Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>sleep和wait区别</strong></p><ol><li>sleep是Thread类的static方法； wait是Object类的方法</li><li>sleep()睡眠时保持对象锁； wait释放锁</li><li>sleep可以放在任何地方； wait()必须放在synchronized block中，否则会在runtime是扔出IllegalMonitorStateExcetion异常</li></ol><hr><p><strong>synchronized和volatile区别</strong></p><ol><li>volatile是线程同步的轻量级实现，性能比synchronized好</li><li>volatile只能修饰变量； synchronized可修饰方法和代码块</li><li>volatile能保证数据可见性，不保证原子性； synchronized可以保证原子性，也可以间接保证可见性。<br><em>synchronized会将私有内存和公共内存中的数据进行同步</em></li><li>volatile解决的是变量在多个线程间的可见性； synchronized解决的是多个线程访问资源的同步性</li></ol><hr><p><strong>内部类</strong></p><p>在类中定义一个类(私有内部类，静态内部类)<br>在方法中定义一个类(局部内部类，匿名内部类)  </p><ol><li>私有内部类<br>编译器做的手脚<ul><li>在内部类中创建了包可见构造器，从而使外部类获得了创建权限</li><li>在外部类中创建了访问私有变量的静态方法，从而使内部类获得了范围权限</li></ul></li><li>静态内部类<br>只能访问其外部类的静态成员</li><li>局部内部类<br>没有修饰符，局部内部类只能范围该方法中的局部变量，并且这些局部变量一定要是final修饰的产量或者隐含是final的(java8)</li><li>匿名内部类<br>不能抽象；仅能被使用一次；不能存在静态成员变量和方法<br><em>只有静态内部类可以访问静态成员变量</em></li></ol><hr><p> <strong>Session和Cookie的区别</strong></p><p> <strong>Session</strong>是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中。<br> <strong>Cookie</strong>是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。<br> 客户端传JSESSIONID，服务端就可以通过这个ID，来将存储到服务端的数据取出</p><hr><p> <strong>Servlet和Filter的区别</strong></p><p> Filter对用户请求进行预处理，接着将请求交给Servlet进行处理并生成响应，最后Filter再对响应的数据进行后处理。</p><hr><p> <strong>强、软、弱、虚引用</strong>  </p><p><strong>强引用</strong> Object obj=new Object()，只要引用还在，就不会被回收<br><strong>软引用</strong>内存不够才会被回收<br><strong>弱引用</strong>下一次垃圾收集器工作时会被回收。<br><strong>虚引用</strong>随时可能被回收，目的是能在这个对象被回收时收到一个系统通知。<br>垃圾回收期是一个优先级较低的线程，并不一定能迅速发现弱引用对象  </p><hr><p><strong>HashMap和Hashtable的区别</strong></p><p><em>先吐槽一下Hashtable的命名，为啥t要小写</em>  </p><ol><li>Hashtable是线程安全的； HashMap不是</li><li>Hashtable不允许有null的KV； HashMap运行</li><li>Hashtable继承Dictionary类； HashMap继承AbstractMap</li><li>HashMap有一个子类LinkedHashMap，对这个类对象进行迭代时，它的顺序是有序的。可以轻易的将LinkedHashMap转换成HashMap； Hashtable不好实现</li></ol><hr><p><strong>join和sleep的区别</strong>  </p><p>join底层调用wait方法，执行到wait释放锁<br>sleep在睡眠时不释放锁</p><hr><p><strong>JDK动态代理和CGLIB代理的区别</strong></p><ol><li>JDK动态动态代理是利用反射机制生存一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。JDK动态代理只能对<em>实现了接口的类生成代理，而不能针对类</em></li><li>CGLIB动态代理是利用ASM开源包，将目标对象类的class文件加载进来，通过修改其字节码生成子类来处理。CGLIB是<em>针对类实现代理</em>，主要是对指定的类生成一个子类，覆盖其中的方法。</li><li>JDK动态代理是面向接口的，在创建代理实现类时比CGLIB要快，创建代理速度快。CGLIB动态代理是通过字节码底层继承要代理类的目标类来实现，<em>创建速度没有JDK动态代理快，但是运行速度比JDK动态代理快</em>。</li></ol><hr><p><strong>重载和重写的区别</strong></p><p><strong>重载</strong>： 方法有同样的名称，但是参数列表不同</p><p><strong>重写</strong>：在java的子类与父类中有两个名称、参数列表都相同的方法的情况。由于它们具有相同的方法签名，所以子类中的新方法将覆盖父类中原有的方法</p><p><strong>区别</strong></p><table><thead><tr><th>重载</th><th>重写</th></tr></thead><tbody><tr><td>编译期概念，遵循“编译期绑定”，即在编译时根据参数变量的类型判断应该调用哪个方法</td><td>运行期概念，遵循“运行期绑定”，即在运行的时候，根据引用变量所指向的实际对象的类型来调用方法  </td></tr><tr><td>方法签名必须不同</td><td>方法签名必须一样  </td></tr><tr><td>返回类型可以不同</td><td>返回类型必须相同</td></tr><tr><td>无限制</td><td>更好的访问，不能抛出更广泛的异常（遵循里式替换原则）</td></tr></tbody></table><hr><p><strong>组合与继承的区别和联系</strong></p><blockquote><p>在继承结构中，父类的内部细节对于子类是可见的。所以我们通常也可以说通过继承的代码复用是一种白盒式代码复用。（如果基类的实现发生改变，那么派生类的实现也将随之改变。这样就导致了子类行为的不可预知性；)  </p><p>组合是通过对现有的对象进行拼装（组合）产生新的、更复杂的功能。因为在对象之间，各自的内部细节是不可见的，所以我们也说这种方式的代码复用是黑盒式代码复用。（因为组合中一般都定义一个类型，所以在编译期根本不知道具体会调用哪个实现类的方法）  </p><p>继承，在写代码的时候就要指名具体继承哪个类，所以，在编译期就确定了关系。（从基类继承来的实现是无法在运行期动态改变的，因此降低了应用的灵活性。）</p><p>组合，在写代码的时候可以采用面向接口编程。所以，类的组合关系一般在运行期确定。  </p></blockquote><p><strong>优缺点对比</strong></p><table><thead><tr><th>组 合 关 系</th><th>继 承 关 系</th></tr></thead><tbody><tr><td>优点：不破坏封装，整体类与局部类之间松耦合，彼此相对独立</td><td>缺点：破坏封装，子类与父类之间紧密耦合，子类依赖于父类的实现，子类缺乏独立性</td></tr><tr><td>优点：具有较好的可扩展性</td><td>缺点：支持扩展，但是往往以增加系统结构的复杂度为代价</td></tr><tr><td>优点：支持动态组合。在运行时，整体对象可以选择不同类型的局部对象</td><td>缺点：不支持动态继承。在运行时，子类无法选择不同的父类</td></tr><tr><td>优点：整体类可以对局部类进行包装，封装局部类的接口，提供新的接口</td><td>缺点：子类不能改变父类的接口</td></tr><tr><td>缺点：整体类不能自动获得和局部类同样的接口</td><td>优点：子类能自动继承父类的接口</td></tr><tr><td>缺点：创建整体类的对象时，需要创建所有局部类的对象</td><td>优点：创建子类的对象时，无须创建父类的对象</td></tr></tbody></table><p><strong>如何选择</strong></p><blockquote><p>继承要慎用，其使用场合仅限于你确信使用该技术有效的情况。一个判断方法是，问一问自己是否需要从新类向基类进行向上转型。如果是必须的，则继承是必要的。反之则应该好好考虑是否需要继承。&lt;&lt;java编程思想&gt;&gt;  </p><p>只有当子类真正是超类的子类型时，才适合用继承。换句话说，对于两个类A和B，只有当两者之间确实存在is-a关系的时候，类B才应该继承类A。&lt;<effective java="">&gt;</effective></p></blockquote><hr><p><strong>Compareable和Comparator</strong></p><p><strong>Comparable</strong>：一个实现了Comparable接口的类，可以让其自身的对象和其它对象进行比较。也就是说，同一个类的对象之间要想比较，对应的类就要实现Compareable接口，并实现<em>compareTo()</em>方法。  </p><p><strong>Comparator</strong>：不改变原有的类。通过定义一个类实现Comparator接口，重写<em>compare()</em>方法。  </p><p>Comparator通常用于排序。Java中的Collectinos和Arrays都包括排序的sort方法，该方法可以接受一个Comparator的实例(比较器)来进行排序；new TreeSet&lt;&gt;(new Comparator())</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;sleep和wait区别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sleep是Thread类的static方法； wait是Object类的方法&lt;/li&gt;
&lt;li&gt;sleep()睡眠时保持对象锁； wait释放锁&lt;/li&gt;
&lt;li&gt;sleep可
      
    
    </summary>
    
    
      <category term="爪哇" scheme="https://hsb786.github.io/tags/%E7%88%AA%E5%93%87/"/>
    
  </entry>
  
  <entry>
    <title>DispatchServlet</title>
    <link href="https://hsb786.github.io/2018/04/08/DispatchServlet/"/>
    <id>https://hsb786.github.io/2018/04/08/DispatchServlet/</id>
    <published>2018-04-08T13:38:41.000Z</published>
    <updated>2018-04-10T10:08:55.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DispatcherServlet是什么"><a href="#DispatcherServlet是什么" class="headerlink" title="DispatcherServlet是什么"></a>DispatcherServlet是什么</h2><p>它是Spring MVC的核心。每个由Spring MVC处理的请求都要经过DispatcherServlet。一般而言，它是前端控制器模式的实现，为应用提供一个统一入口。DispatcherServlet是连接Java与Spring的桥梁，处理所有传入的请求。并且与其他声明在web.xml中的Servlet一样，也是通过一个URL pattern将每个请求映射到DispatcherServlet。</p><p>DispatcherServlet负责将请求委派给Spring MVC中其他的组建处理，比如注有@Controller或@RestController的Controller类，HandlerMappers（处理映射），View Resolvers(视图解析器)等等。</p><p>尽管，请求映射是由 @ResquestMapping 注解完成的，但实际上是由 DispatcherServlet 将请求委派给相应的 Controller 来处理的。</p><h2 id="DispatcherServlet如何处理请求"><a href="#DispatcherServlet如何处理请求" class="headerlink" title="DispatcherServlet如何处理请求"></a>DispatcherServlet如何处理请求</h2><p>正如上面所说，DispatcherServlet 被用来处理所有传入的请求，并将它们路由到不同的 Controller 来进行进一步处理。它决定了由哪个 Controller 处理请求。</p><p>DispatcherServlet 使用处理器映射来将传入的请求路由到处理器。默认情况下，使用 BeanNameUrlHandlerMapping 和 由 @RequestMapping 注解驱动的DefaultAnnotationHandlerMapping。</p><p>为了找到正确的方法来处理请求，它会扫描所有声明了 @Controller 注解的类，并且通过 @RequestMapping 注解找到负责处理该请求的方法。@RequestMapping 注解可以通过路径来映射请求(比如: @RequestMapping(“path”)), 也可以通过 HTTP 方法(比如: @RequestMapping(“path”, method=RequestMethod.GET)), 也可以通过请求参数(比如: @RequestMapping(“path””, method=RequestMethod.POST, params=”param1”)),还可以通过 HTTP 请求头(比如: @RequestMapping(“path”, header=”content-type=text/*”))。我们也可以在类级别声明 @RequestMapping 注解来过滤传入的请求。</p><p>在请求处理之后，Controller 会将逻辑视图的名字和 model 返回给 DispatcherServlet。之后利用视图解析器定位到真正的 View 以便渲染结果。我们可以指定使用的视图解析器，默认情况下，DispatcherServlet 使用 InternalResourceViewResolver来将逻辑视图的名字转换成真正的视图，比如 JSP。</p><p>选定视图之后，DispatcherServlet 会将数据模型与视图相结合，并将结果返回给客户端。并不是任何时候都需要视图，比如一个 RESTful 的 web 服务就不需要，它们的处理方法会利用 @ResponseBody 注解直接将请求结果返回给客户端。可以看REST with Spring course了解更多关于如何使用 Spring MVC 开发和测试 RESTful 服务的知识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DispatcherServlet是什么&quot;&gt;&lt;a href=&quot;#DispatcherServlet是什么&quot; class=&quot;headerlink&quot; title=&quot;DispatcherServlet是什么&quot;&gt;&lt;/a&gt;DispatcherServlet是什么&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://hsb786.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>hash</title>
    <link href="https://hsb786.github.io/2018/04/08/hash/"/>
    <id>https://hsb786.github.io/2018/04/08/hash/</id>
    <published>2018-04-08T13:23:41.000Z</published>
    <updated>2018-04-10T10:10:41.840Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>哈希</strong>  </p><p>Hash，一般翻译成“散列”，也有直接音译为“哈希”的，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出就是散列值  </p><p>特性：根据同一散列函数计算出的散列值如果不同，那么输入值肯定也不同。但是，根据同一散列函数计算出的散列值如果相同，输入值不一定相同</p><p>两个不同的输入值，根据同一散列函数计算出的散列值相同的现象叫做碰撞</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;哈希&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Hash，一般翻译成“散列”，也有直接音译为“哈希”的，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出就是散列值  &lt;/p&gt;
&lt;p&gt;特性：根据同一散列函数计算出的散列值如果不同，那么输入值
      
    
    </summary>
    
    
      <category term="爪哇" scheme="https://hsb786.github.io/tags/%E7%88%AA%E5%93%87/"/>
    
  </entry>
  
  <entry>
    <title>Spring整理</title>
    <link href="https://hsb786.github.io/2018/04/08/spring/"/>
    <id>https://hsb786.github.io/2018/04/08/spring/</id>
    <published>2018-04-08T09:58:41.000Z</published>
    <updated>2018-04-10T10:13:37.327Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Spring结构"><a href="#Spring结构" class="headerlink" title="Spring结构"></a>Spring结构</h2><p>Spring框架的核心组件只有三个：<strong>Bean，Context，Core</strong></p><p>Spring是面向Bean编程，自然Bean组件就是Spring对Java对象Object的封装，在Spring容器中管理的就是被Bean封装了的Java对象。Bean组件解决了Bean的定义，Bean的创建以及Bean的解析。</p><p>Context组件就是我们常说的IOC容器，也就是Spring容器。Context组件可以发现每个Bean之间的关系，为它们建立好Bean之间的依赖关系，为Bean提供生存环境。</p><p>Core组件，它是Context组件与Bean组件的工具包，可以把Core组件理解为Util工具包</p><h2 id="Spring容器"><a href="#Spring容器" class="headerlink" title="Spring容器"></a>Spring容器</h2><p>Spring容器有时候也称为IOC容器。IOC: Inverse of Control，控制反转。<br>控制：控制就是调用类对某一个接口具体实现类的选择控制权<br>反转：选择控制权交给第三方决定，由Spring容器来统一配置管理Bean。</p><p>为了更好理解IOC，大家经常使用依赖注入来代替控制反转这个概念，即让调用类对某一接口的实现类的依赖关系由第三方容器注入，以移除调用类对某一接口实现类的依赖。那么IOC容器的工作就是通过配置文件和注解来描述类和类之间的依赖关系。利用反射机制完成类的初始化和依赖注入。</p><h2 id="BeanFactory和ApplicationContext"><a href="#BeanFactory和ApplicationContext" class="headerlink" title="BeanFactory和ApplicationContext"></a>BeanFactory和ApplicationContext</h2><p>BeanFactory是Spring框架核心接口，提供了IOC的配置机制，是Spring的基础设施，面向Spring本身</p><p>ApplicationContext是建立在BeanFactory之上，提供了更多的面向应用的功能，是Spring给开发者提高了IOC容器接口</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Spring结构&quot;&gt;&lt;a href=&quot;#Spring结构&quot; class=&quot;headerlink&quot; title=&quot;Spring结构&quot;&gt;&lt;/a&gt;Spring结构&lt;/h2&gt;&lt;p&gt;Spring框架的核心组件只有三个：&lt;strong&gt;Bean，Context，Co
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://hsb786.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>防止重复发送 Ajax 请求的解决方案</title>
    <link href="https://hsb786.github.io/2018/04/08/preventDupAjax/"/>
    <id>https://hsb786.github.io/2018/04/08/preventDupAjax/</id>
    <published>2018-04-08T09:58:41.000Z</published>
    <updated>2018-04-10T10:11:26.877Z</updated>
    
    <content type="html"><![CDATA[<hr><p>连续点击多个按钮，可能导致先请求的数据后显示出来。</p><hr><p><strong>解决方案</strong></p><p><strong>1. 将ajsx请求的async设置为false</strong></p><p><strong>2. 利用jquery ajaxPrefilter中断请求</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var pendingRequests = &#123;&#125;;</span><br><span class="line">$.ajaxPrefilter(function( options, originalOptions, jqXHR ) &#123;</span><br><span class="line">    var key = options.url;</span><br><span class="line">    console.log(key);</span><br><span class="line">    if (!pendingRequests[key]) &#123;</span><br><span class="line">        pendingRequests[key] = jqXHR;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //jqXHR.abort();    //放弃后触发的提交</span><br><span class="line">        pendingRequests[key].abort();   // 放弃先触发的提交</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var complete = options.complete;</span><br><span class="line">    options.complete = function(jqXHR, textStatus) &#123;</span><br><span class="line">        pendingRequests[key] = null;</span><br><span class="line">        if ($.isFunction(complete)) &#123;</span><br><span class="line">        complete.apply(this, arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>核心思想是维护一个队列，发送请求时，将请求加入队列，请求响应后，从队列中清楚，这就保证了在任一时刻只能有一个同样的请求发送</p><p>局限性：仅对jquery的ajax有作用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;连续点击多个按钮，可能导致先请求的数据后显示出来。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 将ajsx请求的async设置为false&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 利用jqu
      
    
    </summary>
    
    
      <category term="前端" scheme="https://hsb786.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>值传递和引用传递</title>
    <link href="https://hsb786.github.io/2018/04/08/passByValue/"/>
    <id>https://hsb786.github.io/2018/04/08/passByValue/</id>
    <published>2018-04-08T09:58:41.000Z</published>
    <updated>2018-04-10T10:11:15.624Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>值传递</strong>  指在调用函数时将实际参数<em>复制</em>一份传递到函数中，那么在函数中对参数所进行的修改，将不会影响到实际参数。  </p><p><strong>引用传递</strong> 指在调用函数时将实际参数的地址<em>直接</em>传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p><table><thead><tr><th>求值策略</th><th>求值时间</th><th>求值方式</th><th>根本区别</th></tr></thead><tbody><tr><td>值传递</td><td>调用前</td><td>值的结果（原值的副本）</td><td>会创建副本</td></tr><tr><td>引用传递</td><td>调用前</td><td>原值（原始对象，无副本）</td><td>不创建副本</td></tr></tbody></table><p><strong>值传递和引用传递的区别并不是传递的内容，而是实参到底有没有被复制一份到形参</strong></p><p>java只有值传递，不存在引用传递</p><p>java在传递引用类型数据时，把实际参数的内存地址复制了一份，传递给了形参</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;值传递&lt;/strong&gt;  指在调用函数时将实际参数&lt;em&gt;复制&lt;/em&gt;一份传递到函数中，那么在函数中对参数所进行的修改，将不会影响到实际参数。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引用传递&lt;/strong&gt; 指在调用函数时将实际参数的地址&lt;em&gt;
      
    
    </summary>
    
    
      <category term="爪哇" scheme="https://hsb786.github.io/tags/%E7%88%AA%E5%93%87/"/>
    
  </entry>
  
</feed>
