<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HuShengBin’s blog</title>
  
  <subtitle>码渣的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hsb786.github.io/"/>
  <updated>2018-04-09T12:52:57.117Z</updated>
  <id>https://hsb786.github.io/</id>
  
  <author>
    <name>HuShengBin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>需要注意的一些东西</title>
    <link href="https://hsb786.github.io/2018/04/09/needFocus/"/>
    <id>https://hsb786.github.io/2018/04/09/needFocus/</id>
    <published>2018-04-09T05:53:41.000Z</published>
    <updated>2018-04-09T12:52:57.117Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>Streams</strong></p><ul><li>引入的原因<ul><li>声明性方式处理数据集合</li><li>透明的进行处理，提高性能  </li></ul></li><li>流与集合<ul><li>集合与流的差异就在于什么时候进行计算<ul><li>集合是内存中的数据结构，包含数据结构中目前所有的值</li><li>流的元素则是按需计算/生存</li></ul></li><li>遍历数据的方式<ul><li>集合使用Collection接口，需要用户去做迭代，称为外部迭代</li><li>流的Streams库使用内部迭代  </li></ul></li></ul></li><li>流的使用<ul><li>一个数据源（如集合）来执行一个查询</li><li>一个中间操作链，形成一条流的流水线</li><li>一个终端操作，执行流水线，并能生产结果</li></ul></li><li>流的操作类型<ul><li><strong>Intermediate</strong> : 一个流后面跟随零个或多个intermediate操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是<em>惰性化的</em>，也就是说，仅仅调用到这类方法，并没有真正开始流的遍历</li><li><strong>Terminal</strong> ： 一个流只能有一个terminal操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的<em>最后一根操作</em>。terminal操作的执行，<em>才会真正开始流的变量</em>  </li></ul></li></ul><hr><p><strong>happens-before</strong></p><p>在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系<br>需要注意的是，上面提到的两个操作可以是在不同线程之间的，而且并不意味着前一个操作必须要在后一个操作之前执行，仅仅要求前一个操作的执行结果对后一个操作可见  </p><ul><li>happends-before规则<ul><li>程序顺序规则： 单个线程中的每个操作，happens-before于该线程中的任意后续操作</li><li>监视器锁规则： 对一个锁的解锁，happens-before于随后对这个锁的加锁</li><li>volatile变量规则： 对一个volatile变量的写，happends-before于任意后续对这个volatile变量的读  </li><li>传递性： 如果A happeens-before B，且 B happeend-before C，那么A happeens-before C  </li><li>join规则： 如果线程A执行操作ThreadB.join()成功返回，那么线程B中的任意操作happeens-before与线程A从ThreadB.join()操作成功返回  </li></ul></li></ul><hr><p><strong>fail-fast</strong></p><p>fail-fast机制是java集合(Collection)中的一种错误机制。当多个线程对同一集合的内容进行操作时，就可能会产生fail-fast事件。  </p><p>例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，产生fail-fast事件  </p><p>要了解fail-fast机制，我们首先要对ConcurrentModificationException 异常有所了解。当方法检测到对象的并发修改，但不允许这种修改时就抛出该异常。同时需要注意的是，该异常不会始终指出对象已经由不同线程并发修改，如果单线程违反了规则，同样也有可能会抛出改异常。<br>诚然，迭代器的快速失败行为无法得到保证，它不能保证一定会出现该错误，但是快速失败操作会尽最大努力抛出ConcurrentModificationException异常</p><p>当使用fail-fast iterator对Collection或对Map进行操作过程中尝试直接修改Collection/Map的内容时，即使是在单线程下运行，java.util.ConcurrentModificationException异常也将抛出  </p><p>Iterator是工作在一个独立的线程，并且拥有一个mutex锁。<em>Iterator被创建之后会建立一个指向原来对象的单链索引表，当原来对象发生变化时，这个索引表的内容不会同步该表，所以当索引指针往后移动的时候就找不到要迭代的对象，所以按照fail-fast原则Iterator会马上抛出ConsurrentModificationException异常</em>。</p><p>所以Iterator在工作的时候是不允许被迭代的对象被改变的。但你可以使用Iterator本身的方法remove()来删除对象，Iteraror.remove()方法会在删除当前迭代对象的同时维护索引的一致性。</p><hr><p><strong>数据库三大范式</strong></p><ol><li>1NF：字段不可再分</li><li>2NF：主键依赖，一张表里的数据，必须是跟主键相关的</li><li>3NF：任意两个表不能出现重复的非主键字段</li></ol><hr><p><strong>设计模式六大原则</strong></p><p><strong>单一职责(Single Responsibility Principle)</strong>：一个类只负责一个功能领域中的相应职责</p><p><strong>开闭(Open-Closed Principle)</strong>：对扩展开放，对修改关闭</p><p><strong>里氏替换(Liskov Subsitution Principle)</strong>：子类能出现在基类出现的地方</p><p><strong>依赖倒置(Dependency Inversion Principle)</strong>：针对接口编程，而不是针对实现类编程</p><p><strong>接口隔离(Interface Segregation Principle)</strong>：使用多个专门的接口，而不使用单一的总接口</p><p><strong>迪米特(Law of Demeter)</strong>：一个类尽可能少的与其它类发生相互作用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Streams&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入的原因&lt;ul&gt;
&lt;li&gt;声明性方式处理数据集合&lt;/li&gt;
&lt;li&gt;透明的进行处理，提高性能  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流与集合&lt;ul&gt;
&lt;li&gt;集合与流的差异就在于
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记录一些容易忘记的东西</title>
    <link href="https://hsb786.github.io/2018/04/09/easyForget/"/>
    <id>https://hsb786.github.io/2018/04/09/easyForget/</id>
    <published>2018-04-09T00:42:41.000Z</published>
    <updated>2018-04-09T12:52:28.843Z</updated>
    
    <content type="html"><![CDATA[<hr><p>接口不可以实现接口，可以继承多个接口</p><p>抽象类可以继承具体类</p><p>static不能被重写，重写是运行时动态绑定的</p><p>static变量发生在静态解析阶段，此时已经将字段的符号引用转换成了内存引用，将它与对应的类关联在了一起</p><p>子类构造方法默认会寻找父类无参构造方法，若没有，编译不通过</p><p>抽象方法必须为public否则protected，缺省情况下默认为public</p><p>java8中接口可以含有default方法和static方法</p><p>volatile 禁止指令重排序： 添加内存屏障，保证前面已经完成，后面都没开始</p><p>内部类访问外部类      外部类.this.成员XX</p><p>重载静态绑定，根据参数的静态类型而不是实际类型作为判断依据的</p><p>java的8中基本类型，除了float和double之外，其它6种都实现了常量池</p><p>boolean类型不允许进行任何类型的转换处理</p><p>java7以后，常量池被放入到堆空间中。导致Intern()函数的功能不同。intern()检查常量池时候存在该字符串，存在的话就直接返回；否则返回首次在堆中声明的相同字符串的引用</p><p>ArrayList 默认容器 10                HashMap   16</p><p>newInstance 低效率，只能调用<em>无参</em>构造。<br>将new这个方式分解为两步： 首先调用class的加载方式加载某个类，然后实例化  </p><p>HashSet底层借用HashMap  </p><blockquote><p>private static final Object PRESENT=new Object();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    return map.put(e, PRESENT)==null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>字符只有在内存中才会形成，其它都是以字节的方式进行的</p><p>强引用： Object obj=new Object()，只要引用还在，就不会被回收<br>软引用： 内存不够才会被回收<br>弱引用： 下一次垃圾收集器工作时会被回收。<br>虚引用： 随时可能被回收，目的是能在这个对象被回收时收到一个系统通知</p><p>内加载器： JVM动态加载所需的类。  委托、可见、单一。<br>交给父加载器；父加载器加载的类子加载器都能看到；一个类只能被一个加载一次</p><p>每个对象有两个队列： 就绪队列、阻塞队列</p><p>ReentrantLock结合Condition可以有选择性地进行通知，在调度上更加灵活</p><p>指令重排序： 编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段</p><p>null可以强制转换为任何java类类型<br>其返回值还是null，可以调用static方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;接口不可以实现接口，可以继承多个接口&lt;/p&gt;
&lt;p&gt;抽象类可以继承具体类&lt;/p&gt;
&lt;p&gt;static不能被重写，重写是运行时动态绑定的&lt;/p&gt;
&lt;p&gt;static变量发生在静态解析阶段，此时已经将字段的符号引用转换成了内存引用，将它与对应的类关联在了一起&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>区别</title>
    <link href="https://hsb786.github.io/2018/04/09/distinguish/"/>
    <id>https://hsb786.github.io/2018/04/09/distinguish/</id>
    <published>2018-04-08T23:48:41.000Z</published>
    <updated>2018-04-09T12:52:24.567Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>sleep和wait区别</strong></p><ol><li>sleep是Thread类的static方法； wait是Object类的方法</li><li>sleep()睡眠时保持对象锁； wait释放锁</li><li>sleep可以放在任何地方； wait()必须放在synchronized block中，否则会在runtime是扔出IllegalMonitorStateExcetion异常</li></ol><hr><p><strong>synchronized和volatile区别</strong></p><ol><li>volatile是线程同步的轻量级实现，性能比synchronized好</li><li>volatile只能修饰变量； synchronized可修饰方法和代码块</li><li>volatile能保证数据可见性，不保证原子性； synchronized可以保证原子性，也可以间接保证可见性。<br><em>synchronized会将私有内存和公共内存中的数据进行同步</em></li><li>volatile解决的是变量在多个线程间的可见性； synchronized解决的是多个线程访问资源的同步性</li></ol><hr><p><strong>内部类</strong></p><p>在类中定义一个类(私有内部类，静态内部类)<br>在方法中定义一个类(局部内部类，匿名内部类)  </p><ol><li>私有内部类<br>编译器做的手脚<ul><li>在内部类中创建了包可见构造器，从而使外部类获得了创建权限</li><li>在外部类中创建了访问私有变量的静态方法，从而使内部类获得了范围权限</li></ul></li><li>静态内部类<br>只能访问其外部类的静态成员</li><li>局部内部类<br>没有修饰符，局部内部类只能范围该方法中的局部变量，并且这些局部变量一定要是final修饰的产量或者隐含是final的(java8)</li><li>匿名内部类<br>不能抽象；仅能被使用一次；不能存在静态成员变量和方法<br><em>只有静态内部类可以访问静态成员变量</em></li></ol><hr><p> <strong>Session和Cookie的区别</strong></p><p> <strong>Session</strong>是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中。<br> <strong>Cookie</strong>是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。<br> 客户端传JSESSIONID，服务端就可以通过这个ID，来将存储到服务端的数据取出</p><hr><p> <strong>Servlet和Filter的区别</strong></p><p> Filter对用户请求进行预处理，接着将请求交给Servlet进行处理并生成响应，最后Filter再对响应的数据进行后处理。</p><hr><p> <strong>强、软、弱、虚引用</strong>  </p><p><strong>强引用</strong> Object obj=new Object()，只要引用还在，就不会被回收<br><strong>软引用</strong>内存不够才会被回收<br><strong>弱引用</strong>下一次垃圾收集器工作时会被回收。<br><strong>虚引用</strong>随时可能被回收，目的是能在这个对象被回收时收到一个系统通知。<br>垃圾回收期是一个优先级较低的线程，并不一定能迅速发现弱引用对象  </p><hr><p><strong>HashMap和Hashtable的区别</strong></p><p><em>先吐槽一下Hashtable的命名，为啥t要小写</em>  </p><ol><li>Hashtable是线程安全的； HashMap不是</li><li>Hashtable不允许有null的KV； HashMap运行</li><li>Hashtable继承Dictionary类； HashMap继承AbstractMap</li><li>HashMap有一个子类LinkedHashMap，对这个类对象进行迭代时，它的顺序是有序的。可以轻易的将LinkedHashMap转换成HashMap； Hashtable不好实现</li></ol><hr><p><strong>join和sleep的区别</strong>  </p><p>join底层调用wait方法，执行到wait释放锁<br>sleep在睡眠时不释放锁</p><hr><p><strong>JDK动态代理和CGLIB代理的区别</strong></p><ol><li>JDK动态动态代理是利用反射机制生存一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。JDK动态代理只能对<em>实现了接口的类生成代理，而不能针对类</em></li><li>CGLIB动态代理是利用ASM开源包，将目标对象类的class文件加载进来，通过修改其字节码生成子类来处理。CGLIB是<em>针对类实现代理</em>，主要是对指定的类生成一个子类，覆盖其中的方法。</li><li>JDK动态代理是面向接口的，在创建代理实现类时比CGLIB要快，创建代理速度快。CGLIB动态代理是通过字节码底层继承要代理类的目标类来实现，<em>创建速度没有JDK动态代理快，但是运行速度比JDK动态代理快</em>。</li></ol><hr><p><strong>重载和重写的区别</strong></p><p><strong>重载</strong>： 方法有同样的名称，但是参数列表不同</p><p><strong>重写</strong>：在java的子类与父类中有两个名称、参数列表都相同的方法的情况。由于它们具有相同的方法签名，所以子类中的新方法将覆盖父类中原有的方法</p><p><strong>区别</strong></p><table><thead><tr><th>重载</th><th>重写</th></tr></thead><tbody><tr><td>编译期概念，遵循“编译期绑定”，即在编译时根据参数变量的类型判断应该调用哪个方法</td><td>运行期概念，遵循“运行期绑定”，即在运行的时候，根据引用变量所指向的实际对象的类型来调用方法  </td></tr><tr><td>方法签名必须不同</td><td>方法签名必须一样  </td></tr><tr><td>返回类型可以不同</td><td>返回类型必须相同</td></tr><tr><td>无限制</td><td>更好的访问，不能抛出更广泛的异常（遵循里式替换原则）</td></tr></tbody></table><hr><p><strong>组合与继承的区别和联系</strong></p><blockquote><p>在继承结构中，父类的内部细节对于子类是可见的。所以我们通常也可以说通过继承的代码复用是一种白盒式代码复用。（如果基类的实现发生改变，那么派生类的实现也将随之改变。这样就导致了子类行为的不可预知性；)  </p><p>组合是通过对现有的对象进行拼装（组合）产生新的、更复杂的功能。因为在对象之间，各自的内部细节是不可见的，所以我们也说这种方式的代码复用是黑盒式代码复用。（因为组合中一般都定义一个类型，所以在编译期根本不知道具体会调用哪个实现类的方法）  </p><p>继承，在写代码的时候就要指名具体继承哪个类，所以，在编译期就确定了关系。（从基类继承来的实现是无法在运行期动态改变的，因此降低了应用的灵活性。）</p><p>组合，在写代码的时候可以采用面向接口编程。所以，类的组合关系一般在运行期确定。  </p></blockquote><p><strong>优缺点对比</strong></p><table><thead><tr><th>组 合 关 系</th><th>继 承 关 系</th></tr></thead><tbody><tr><td>优点：不破坏封装，整体类与局部类之间松耦合，彼此相对独立</td><td>缺点：破坏封装，子类与父类之间紧密耦合，子类依赖于父类的实现，子类缺乏独立性</td></tr><tr><td>优点：具有较好的可扩展性</td><td>缺点：支持扩展，但是往往以增加系统结构的复杂度为代价</td></tr><tr><td>优点：支持动态组合。在运行时，整体对象可以选择不同类型的局部对象</td><td>缺点：不支持动态继承。在运行时，子类无法选择不同的父类</td></tr><tr><td>优点：整体类可以对局部类进行包装，封装局部类的接口，提供新的接口</td><td>缺点：子类不能改变父类的接口</td></tr><tr><td>缺点：整体类不能自动获得和局部类同样的接口</td><td>优点：子类能自动继承父类的接口</td></tr><tr><td>缺点：创建整体类的对象时，需要创建所有局部类的对象</td><td>优点：创建子类的对象时，无须创建父类的对象</td></tr></tbody></table><p><strong>如何选择</strong></p><blockquote><p>继承要慎用，其使用场合仅限于你确信使用该技术有效的情况。一个判断方法是，问一问自己是否需要从新类向基类进行向上转型。如果是必须的，则继承是必要的。反之则应该好好考虑是否需要继承。&lt;&lt;java编程思想&gt;&gt;  </p><p>只有当子类真正是超类的子类型时，才适合用继承。换句话说，对于两个类A和B，只有当两者之间确实存在is-a关系的时候，类B才应该继承类A。&lt;<effective java="">&gt;</effective></p></blockquote><hr><p><strong>Compareable和Comparator</strong></p><p><strong>Comparable</strong>：一个实现了Comparable接口的类，可以让其自身的对象和其它对象进行比较。也就是说，同一个类的对象之间要想比较，对应的类就要实现Compareable接口，并实现<em>compareTo()</em>方法。  </p><p><strong>Comparator</strong>：不改变原有的类。通过定义一个类实现Comparator接口，重写<em>compare()</em>方法。  </p><p>Comparator通常用于排序。Java中的Collectinos和Arrays都包括排序的sort方法，该方法可以接受一个Comparator的实例(比较器)来进行排序；new TreeSet&lt;&gt;(new Comparator())</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;sleep和wait区别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sleep是Thread类的static方法； wait是Object类的方法&lt;/li&gt;
&lt;li&gt;sleep()睡眠时保持对象锁； wait释放锁&lt;/li&gt;
&lt;li&gt;sleep可
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DispatchServlet</title>
    <link href="https://hsb786.github.io/2018/04/08/DispatchServlet/"/>
    <id>https://hsb786.github.io/2018/04/08/DispatchServlet/</id>
    <published>2018-04-08T13:38:41.000Z</published>
    <updated>2018-04-09T12:21:51.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DispatcherServlet是什么"><a href="#DispatcherServlet是什么" class="headerlink" title="DispatcherServlet是什么"></a>DispatcherServlet是什么</h2><p>它是Spring MVC的核心。每个由Spring MVC处理的请求都要经过DispatcherServlet。一般而言，它是前端控制器模式的实现，为应用提供一个统一入口。DispatcherServlet是连接Java与Spring的桥梁，处理所有传入的请求。并且与其他声明在web.xml中的Servlet一样，也是通过一个URL pattern将每个请求映射到DispatcherServlet。</p><p>DispatcherServlet负责将请求委派给Spring MVC中其他的组建处理，比如注有@Controller或@RestController的Controller类，HandlerMappers（处理映射），View Resolvers(视图解析器)等等。</p><p>尽管，请求映射是由 @ResquestMapping 注解完成的，但实际上是由 DispatcherServlet 将请求委派给相应的 Controller 来处理的。</p><h2 id="DispatcherServlet如何处理请求"><a href="#DispatcherServlet如何处理请求" class="headerlink" title="DispatcherServlet如何处理请求"></a>DispatcherServlet如何处理请求</h2><p>正如上面所说，DispatcherServlet 被用来处理所有传入的请求，并将它们路由到不同的 Controller 来进行进一步处理。它决定了由哪个 Controller 处理请求。</p><p>DispatcherServlet 使用处理器映射来将传入的请求路由到处理器。默认情况下，使用 BeanNameUrlHandlerMapping 和 由 @RequestMapping 注解驱动的DefaultAnnotationHandlerMapping。</p><p>为了找到正确的方法来处理请求，它会扫描所有声明了 @Controller 注解的类，并且通过 @RequestMapping 注解找到负责处理该请求的方法。@RequestMapping 注解可以通过路径来映射请求(比如: @RequestMapping(“path”)), 也可以通过 HTTP 方法(比如: @RequestMapping(“path”, method=RequestMethod.GET)), 也可以通过请求参数(比如: @RequestMapping(“path””, method=RequestMethod.POST, params=”param1”)),还可以通过 HTTP 请求头(比如: @RequestMapping(“path”, header=”content-type=text/*”))。我们也可以在类级别声明 @RequestMapping 注解来过滤传入的请求。</p><p>在请求处理之后，Controller 会将逻辑视图的名字和 model 返回给 DispatcherServlet。之后利用视图解析器定位到真正的 View 以便渲染结果。我们可以指定使用的视图解析器，默认情况下，DispatcherServlet 使用 InternalResourceViewResolver来将逻辑视图的名字转换成真正的视图，比如 JSP。</p><p>选定视图之后，DispatcherServlet 会将数据模型与视图相结合，并将结果返回给客户端。并不是任何时候都需要视图，比如一个 RESTful 的 web 服务就不需要，它们的处理方法会利用 @ResponseBody 注解直接将请求结果返回给客户端。可以看REST with Spring course了解更多关于如何使用 Spring MVC 开发和测试 RESTful 服务的知识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DispatcherServlet是什么&quot;&gt;&lt;a href=&quot;#DispatcherServlet是什么&quot; class=&quot;headerlink&quot; title=&quot;DispatcherServlet是什么&quot;&gt;&lt;/a&gt;DispatcherServlet是什么&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hash</title>
    <link href="https://hsb786.github.io/2018/04/08/hash/"/>
    <id>https://hsb786.github.io/2018/04/08/hash/</id>
    <published>2018-04-08T13:23:41.000Z</published>
    <updated>2018-04-09T12:52:40.306Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>哈希</strong>  </p><p>Hash，一般翻译成“散列”，也有直接音译为“哈希”的，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出就是散列值  </p><p>特性：根据同一散列函数计算出的散列值如果不同，那么输入值肯定也不同。但是，根据同一散列函数计算出的散列值如果相同，输入值不一定相同</p><p>两个不同的输入值，根据同一散列函数计算出的散列值相同的现象叫做碰撞</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;哈希&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Hash，一般翻译成“散列”，也有直接音译为“哈希”的，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出就是散列值  &lt;/p&gt;
&lt;p&gt;特性：根据同一散列函数计算出的散列值如果不同，那么输入值
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring整理</title>
    <link href="https://hsb786.github.io/2018/04/08/spring/"/>
    <id>https://hsb786.github.io/2018/04/08/spring/</id>
    <published>2018-04-08T09:58:41.000Z</published>
    <updated>2018-04-09T12:53:18.798Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Spring结构"><a href="#Spring结构" class="headerlink" title="Spring结构"></a>Spring结构</h2><p>Spring框架的核心组件只有三个：<strong>Bean，Context，Core</strong></p><p>Spring是面向Bean编程，自然Bean组件就是Spring对Java对象Object的封装，在Spring容器中管理的就是被Bean封装了的Java对象。Bean组件解决了Bean的定义，Bean的创建以及Bean的解析。</p><p>Context组件就是我们常说的IOC容器，也就是Spring容器。Context组件可以发现每个Bean之间的关系，为它们建立好Bean之间的依赖关系，为Bean提供生存环境。</p><p>Core组件，它是Context组件与Bean组件的工具包，可以把Core组件理解为Util工具包</p><p>##Spring容器</p><p>Spring容器有时候也称为IOC容器。IOC: Inverse of Control，控制反转。<br>控制：控制就是调用类对某一个接口具体实现类的选择控制权<br>反转：选择控制权交给第三方决定，由Spring容器来统一配置管理Bean。</p><p>为了更好理解IOC，大家经常使用依赖注入来代替控制反转这个概念，即让调用类对某一接口的实现类的依赖关系由第三方容器注入，以移除调用类对某一接口实现类的依赖。那么IOC容器的工作就是通过配置文件和注解来描述类和类之间的依赖关系。利用反射机制完成类的初始化和依赖注入。</p><p>##BeanFactory和ApplicationContext  </p><p>BeanFactory是Spring框架核心接口，提供了IOC的配置机制，是Spring的基础设施，面向Spring本身</p><p>ApplicationContext是建立在BeanFactory之上，提供了更多的面向应用的功能，是Spring给开发者提高了IOC容器接口</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Spring结构&quot;&gt;&lt;a href=&quot;#Spring结构&quot; class=&quot;headerlink&quot; title=&quot;Spring结构&quot;&gt;&lt;/a&gt;Spring结构&lt;/h2&gt;&lt;p&gt;Spring框架的核心组件只有三个：&lt;strong&gt;Bean，Context，Co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC</title>
    <link href="https://hsb786.github.io/2018/04/08/SpringMVC/"/>
    <id>https://hsb786.github.io/2018/04/08/SpringMVC/</id>
    <published>2018-04-08T09:58:41.000Z</published>
    <updated>2018-04-09T12:53:23.535Z</updated>
    
    <content type="html"><![CDATA[<hr><p>##SpringMVC工作流程</p><p>SpringMVC是一种基于Servelt的技术，它提供了控制器DispatchServlet和相关组件，这些SpringMVC的组件一起协调工作，完成对web请求的相应。</p><ol><li>客户端发出一个HTTP请求，Web服务器接收到这个请求。服务器检查HTTP请求的路径，如果匹配DispatchServelt的请求映射路径(web.xml中指定)，则Web容器将该请求转交给对应的DispatchServlet处理</li><li>DispatchServlet接收到这个请求后，将根据请求的信息以及HandlerMapping配置找到处理请求的处理器（Handler）。HandlerMapping可以简单理解为统一资源标识符URL域与处理器Handler之间的关系。</li><li>找到对应的处理器之后，通过HandlerAdapter对Handler进行封装，再以同一的适配器接口调用Handler。因为为了更加灵活的编码和AOP增强功能，SpringMVC会给处理器加入拦截器，这样就可以在处理器执行前后加入执行前后加入自己的代码，于是就构成了一个处理器的执行链，所以SpringMVC提供了处理器适配器HandlerAdapter，帮助我们运行相应的处理器以及我们添加进去的拦截器。</li><li>处理器完成了请求的业务逻辑之后将返回一个ModelAndView对象给DIspatcherServlet，这里ModelAndView包含了视图的逻辑名和模型数据信息。</li><li>得到了ModelAndView之后，DispatchServlet借助ViewResolver视图解析器将逻辑试图转换为真实视图。</li><li>通过ViewResolver视图解析器得到了真实视图后，DispatServlet使用这个真实视图对象对ModelAndView中的模型数据进行渲染。</li><li>最终DispatchServlet将渲染过后的视图对象返回给请求的客户端，客户端得到的响应可能是一个普通的HTML页面，也可能是一个JSON串，甚至是一张图片等等不同的视图模型。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;##SpringMVC工作流程&lt;/p&gt;
&lt;p&gt;SpringMVC是一种基于Servelt的技术，它提供了控制器DispatchServlet和相关组件，这些SpringMVC的组件一起协调工作，完成对web请求的相应。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发出一个HT
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一些小技巧</title>
    <link href="https://hsb786.github.io/2018/04/08/skills/"/>
    <id>https://hsb786.github.io/2018/04/08/skills/</id>
    <published>2018-04-08T09:58:41.000Z</published>
    <updated>2018-04-09T12:53:13.420Z</updated>
    
    <content type="html"><![CDATA[<hr><p>位运算直接对内存数据进行操作，不需要转成十进制，因此处理速度非常快</p><p> X % 2^n = X &amp; (2^n-1)</p><hr><p><strong>判段一个数组是否包含某个值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set=new HashSet&lt;String&gt;(Arrays.asList(arr));  </span><br><span class="line">return set.contains(targetValue);</span><br></pre></td></tr></table></figure></p><p>效率慢，要将数组压入Collection类型中，首先要将数组元素便利一遍，然后再使用集合类做其它操作。</p><p>可以使用Apache Commons类库中提供的<strong>ArrayUtils</strong>类的<strong>contains</strong>方法<br>contains内部调用indexOf方法</p><p><img src="https://github.com/hsb786/DOC/blob/master/files/img/indexOf.png" alt="indexOf"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;位运算直接对内存数据进行操作，不需要转成十进制，因此处理速度非常快&lt;/p&gt;
&lt;p&gt; X % 2^n = X &amp;amp; (2^n-1)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;判段一个数组是否包含某个值&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;hig
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>防止重复发送 Ajax 请求的解决方案</title>
    <link href="https://hsb786.github.io/2018/04/08/preventDupAjax/"/>
    <id>https://hsb786.github.io/2018/04/08/preventDupAjax/</id>
    <published>2018-04-08T09:58:41.000Z</published>
    <updated>2018-04-09T12:53:08.971Z</updated>
    
    <content type="html"><![CDATA[<hr><p>连续点击多个按钮，可能导致先请求的数据后显示出来。</p><hr><p><strong>解决方案</strong></p><p><strong>1. 将ajsx请求的async设置为false</strong></p><p><strong>2. 利用jquery ajaxPrefilter中断请求</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var pendingRequests = &#123;&#125;;</span><br><span class="line">$.ajaxPrefilter(function( options, originalOptions, jqXHR ) &#123;</span><br><span class="line">    var key = options.url;</span><br><span class="line">    console.log(key);</span><br><span class="line">    if (!pendingRequests[key]) &#123;</span><br><span class="line">        pendingRequests[key] = jqXHR;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //jqXHR.abort();    //放弃后触发的提交</span><br><span class="line">        pendingRequests[key].abort();   // 放弃先触发的提交</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var complete = options.complete;</span><br><span class="line">    options.complete = function(jqXHR, textStatus) &#123;</span><br><span class="line">        pendingRequests[key] = null;</span><br><span class="line">        if ($.isFunction(complete)) &#123;</span><br><span class="line">        complete.apply(this, arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>核心思想是维护一个队列，发送请求时，将请求加入队列，请求响应后，从队列中清楚，这就保证了在任一时刻只能有一个同样的请求发送</p><p>局限性：仅对jquery的ajax有作用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;连续点击多个按钮，可能导致先请求的数据后显示出来。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 将ajsx请求的async设置为false&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 利用jqu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事务</title>
    <link href="https://hsb786.github.io/2018/04/08/sqlTransaction/"/>
    <id>https://hsb786.github.io/2018/04/08/sqlTransaction/</id>
    <published>2018-04-08T09:58:41.000Z</published>
    <updated>2018-04-09T12:53:26.778Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>事务（Transaction），一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元（unit）。在计算机术语中，事务通常就是指数据库事务。</p></blockquote><p><strong>概念</strong></p><p>一个数据库事务通常包含对数据库进行读或写的一个操作序列。它的存在包括有以下两个目的</p><blockquote><ol><li>为数据库提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。</li><li>当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离的方法，以防止彼此的操作互相干扰。</li></ol></blockquote><p>当一个事务被提交给了DBMS（数据库管理系统），则DBMS需要确保该事务中的所有操作都成功完成且其结果被永久保存在数据库中，如果事务中有的操作没有成功完成，则事务中的所有操作都需要被回滚，回到事务执行前的状态（要么全执行，要么全都不执行）;同时，该事务对数据库或者其他事务的执行无影响，所有的事务都好像在独立的运行。</p><p>但在现实情况下，失败的风险很高。在一个数据库事务的执行过程中，有可能会遇上事务操作失败、数据库系统/操作系统失败，甚至是存储介质失败等情况。这便需要DBMS对一个执行失败的事务执行恢复操作，将其数据库状态恢复到一致状态（数据的一致性得到保证的状态）。为了实现将数据库状态恢复到一致状态的功能，DBMS通常需要维护事务日志以追踪事务中所有影响数据库数据的操作。</p><p><strong>特性</strong></p><p>并非任意的对数据库的操作序列都是数据库事务。事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。</p><blockquote><p>原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。<br>一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。<br>隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。<br>持久性（Durability）：一个事务一旦提交，他对数据库的修改应该永久保存在数据库中。</p></blockquote><hr><p><strong>脏读</strong>：又称无效数据的读出。指一个事务对数据进行了修改，还没有提交到数据库中，另外一个事务访问并使用了该数据。由于这个数据还没有提交，所以另外一个事务读到的这个数据是脏数据。</p><p><strong>不可重复读</strong>：一个事务范围内对两个相同的查询却返回了不同数据。这是因为其它事务修改的提交而引起的。</p><p><strong>幻读</strong>：指当事务不是独立执行时发生的一种现象。例如第一个事务涉及到表中全部数据行的修改，另一个事务添加了一行新数据，那么执行第一个事务后，发现表中还有没有被修改的数据行。</p><hr><p><strong>隔离级别</strong></p><ol><li><p>未提交读(Read uncommitted)：一个事务可以读取另一个事务未提交的数据</p></li><li><p>提交读(Read committed)：在一个事务修改数据过程中，其它事务不能读该数据</p></li></ol><p>数据库锁情况</p><blockquote><p>事务对当前读取的数据加行级共享锁（当读到时才加锁），一旦读完该行，立即释放该行级共享锁</p><p>事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加行级排他锁，直到事务结束才释放。</p></blockquote><ol start="3"><li>可重复读(Repeatable reads)：解决不可重复读的问题</li></ol><p>数据库锁情况</p><blockquote><p>事务在读取某数据的瞬间，必须先对其加行级共享锁，直到事务结束才释放</p><p>事务在更新某数据的瞬间，必须先对其加行级排他锁，直到事务结束才释放</p></blockquote><ol start="4"><li>序列化(Serializable)：最高的隔离级别</li></ol><p>数据库锁情况</p><blockquote><p>事务在读取数据时，必须先对其加表级共享锁，直到事务结束才释放</p><p>事务在更新数据时，必须先对其加表级排他锁，直到事务结束才释放</p></blockquote><p>隔离级别越高，同时在并发现上也越低</p><hr><p><strong>锁的分类</strong></p><p>按锁级别划分：</p><p><strong>共享锁(Share Lock)</strong></p><p>又称读锁，是读取操作创建的锁。其它用户可以并发读取数据，但任何事务都不能对数据进行修改，直到已释放所有共享锁</p><p>如果事务T对数据A加上共享锁后，则其它事务只能对A再加共享锁，不能加排他锁。获取共享锁的事务只能读数据，不能修改数据</p><p><strong>用法</strong></p><p><em>select   …    LOCK IN SHARE MODE</em>，</p><p>当没有其它线程对查询结果集中的任何一行使用排他锁时，可以成功申请共享锁，否则会被阻塞。其它线程也可以读取使用了共享锁的表，而且这些线程读取的是同一个版本的数据</p><hr><p><strong>排他锁(eXclusive Lock)</strong></p><p>又称写锁，如果事务T对数据A加上排他锁后，则其他事务不能再对A加任何类型的锁。获取排他锁的事务既能读数据，又能修改数据</p><p><strong>用法</strong></p><p><em>select …  FOR UPDATE</em></p><p>当没有其它线程对查询结果集中的任何一行使用排他锁时，可以成功申请排他锁，否则会被阻塞</p><hr><p>按锁的粒度划分</p><p><strong>行级锁</strong></p><p>对当前操作的行进行加锁。加锁粒度最小，但加锁的开销最大。行级锁分为共享锁和排他锁</p><p><strong>特点</strong></p><p>开销大，加锁慢；会出现死锁；锁定力度最小，发生锁冲突的概率最低，并发度也最高。</p><hr><p><strong>表级锁</strong></p><p>对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分MySQL引擎支持。最常使用的MYISAM与INNODB都支持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。</p><p><strong>特点</strong></p><p>开销小，加锁快；不会出现死锁；锁定粒度大，发出锁冲突的概率最高，并发度最低。</p><hr><p><strong>页级锁</strong></p><p>页级锁是MySQL中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。BDB支持页级锁</p><p><strong>特点</strong></p><p>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p><hr><p><strong>Innodb中的行锁与表锁</strong></p><p>InnoDB行锁是通过给索引上的索引项加锁来实现的。InnoDB这种行锁实现特点意味着：<em>只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！</em></p><p><strong>行级锁与死锁</strong></p><p>在MySQL中，<strong>行级锁并不是直接锁记录，而是锁索引</strong>。索引分为主键索引和非主键索引两种，如果一条sql语句操作了主键索引，MySQL就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL会先锁定该非主键索引，再锁定相关的主键索引。 在UPDATE、DELETE操作时，MySQL不仅锁定WHERE条件扫描过的所有索引记录，而且会锁定相邻的键值，即所谓的next-key locking。</p><p>当两个事务同时执行，一个锁住了主键索引，在等待其他相关索引。另一个锁定了非主键索引，在等待主键索引。这样就会发生死锁。</p><p>发生死锁后，InnoDB一般都可以检测到，并使一个事务释放锁回退，另一个获取锁完成事务。</p><hr><p><strong>常见的三种解决死锁的方法</strong></p><ol><li>如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会</li><li>在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率</li><li>对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率</li></ol><hr><p>按使用方式划分</p><p><strong>悲观锁</strong></p><blockquote><p>在关系数据库管理系统里，悲观并发控制（又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作都某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。</p><p>悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。</p></blockquote><p><strong>在数据库中，悲观锁的流程如下：</strong></p><blockquote><p>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。</p><p>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。</p><p>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。</p><p>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</p></blockquote><p>使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。</p><p><strong>优点与不足</strong></p><p>悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；另外，在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数</p><hr><p><strong>乐观锁</strong></p><blockquote><p>在关系数据库管理系统里，乐观并发控制（又名“乐观锁”，Optimistic Concurrency Control，缩写“OCC”）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。乐观事务控制最早是由孔祥重（H.T.Kung）教授提出。</p></blockquote><p>乐观锁（ Optimistic Locking ） 相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</p><p>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</p><blockquote><p>数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。</p></blockquote><p><strong>优点与不足</strong></p><p>乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。但如果直接简单这么做，还是有可能会遇到不可预期的结果，例如两个事务都读取了数据库的某一行，经过修改以后写回数据库，这时就遇到了问题。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;事务（Transaction），一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元（unit）。在计算机术语中，事务通常就是指数据库事务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;stro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>值传递和引用传递</title>
    <link href="https://hsb786.github.io/2018/04/08/passByValue/"/>
    <id>https://hsb786.github.io/2018/04/08/passByValue/</id>
    <published>2018-04-08T09:58:41.000Z</published>
    <updated>2018-04-09T12:53:01.695Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>值传递</strong>  指在调用函数时将实际参数<em>复制</em>一份传递到函数中，那么在函数中对参数所进行的修改，将不会影响到实际参数。  </p><p><strong>引用传递</strong> 指在调用函数时将实际参数的地址<em>直接</em>传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p><table><thead><tr><th>求值策略</th><th>求值时间</th><th>求值方式</th><th>根本区别</th></tr></thead><tbody><tr><td>值传递</td><td>调用前</td><td>值的结果（原值的副本）</td><td>会创建副本</td></tr><tr><td>引用传递</td><td>调用前</td><td>原值（原始对象，无副本）</td><td>不创建副本</td></tr></tbody></table><p><strong>值传递和引用传递的区别并不是传递的内容，而是实参到底有没有被复制一份到形参</strong></p><p>java只有值传递，不存在引用传递</p><p>java在传递引用类型数据时，把实际参数的内存地址复制了一份，传递给了形参</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;值传递&lt;/strong&gt;  指在调用函数时将实际参数&lt;em&gt;复制&lt;/em&gt;一份传递到函数中，那么在函数中对参数所进行的修改，将不会影响到实际参数。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引用传递&lt;/strong&gt; 指在调用函数时将实际参数的地址&lt;em&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java虚拟机是如何执行线程同步的</title>
    <link href="https://hsb786.github.io/2018/04/08/performsSyn/"/>
    <id>https://hsb786.github.io/2018/04/08/performsSyn/</id>
    <published>2018-04-08T09:48:41.000Z</published>
    <updated>2018-04-09T12:53:05.276Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>线程和共享数据</strong></p><p>在JVM中，每个线程独享一块栈内存，其中包括局部变量、线程调用的每个方法的参数和返回值。其它线程无法读取到该栈内存块中的数据。栈中的数据仅限于基本类型和对象引用。</p><p>在JVM中，堆内存是所有线程共享的。对象在堆中。</p><p>还有一部分数据保存JVM中的方法区中，比如类的静态变量。方法去和栈类似，其中只包含基本类型和对象引用。和栈不同的是，方法区中的静态变量可以被所有线程访问到。</p><hr><p><strong>对象和类的锁</strong></p><p>JMM中有两块区域可以被所有线程共享</p><blockquote><p>堆，存放着所有对象<br>方法区，存放着静态变量</p></blockquote><p>那么，如果有多个线程想要同时访问同一个对象或者静态变量，就需要被管控，否则可能出现不可预期的结果</p><p>为了协调多个线程之间的共享数据访问，虚拟机给每个对象和类都分配了一个锁。这个锁就像一个特权，在同一时刻，只有一个线程可以“拥有”这个类或者对象。如果一个线程想要获得某个类或者对象的锁，需要询问虚拟机。当一个线程向虚拟机申请某个类或者对象的锁之后，也许很快或者很慢虚拟机可以把锁分配给这个线程，同时这个线程也许永远也无法获得锁。但线程不再需要锁的时候，他再把锁还给虚拟机。这时虚拟机就可以再把锁分配给其它申请锁的线程。</p><p>类锁其实通过对象锁实现的。因为当虚拟机加载一个类的时候，会为这个类实例化一个java.lang.Class对象，当你锁住一个类的时候，其实锁住的是其对应的Class对象</p><hr><p><strong>监视器（Monitors）</strong></p><p>锁其实是通过监视器实现的，监视器主要功能是监控一段代码，确保在同一时间只有一个线程在执行。</p><p>每个监视器都与一个对象相关联。当线程执行到监视器监视下的代码块中的第一条指令时，线程必须获取对被引用对象的锁定。在线程获取锁之前，它是无法执行这段代码的，一旦获得锁，线程便可以进入“被保护”的代码开始执行。</p><p>当线程离开代码块时，无论如何离开，都会释放所关联对象的锁</p><hr><p><strong>多次加锁</strong></p><p>同一个线程可以对同一个对象进行多次加锁。每个对象维护着一个记录着被锁次数的计数器。未被锁定的对象的该计数器为0，当一个线程获得锁喉，该计数器自增变为1，当同一个线程再次获得该对象的锁的时候，计数器再次自增。当同一个线程释放锁的时候，计数器再自减。当计数器为0的时候。锁将被释放，其它线程便可以获得锁。</p><hr><p><strong>同步</strong></p><p>在Java中，当有多个线程都必须要对同一个共享数据进行访问时，有一种协调方式叫做同步。Java语言提供了两种内置方式来使线程同步的访问数据：同步代码块和同步方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;线程和共享数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在JVM中，每个线程独享一块栈内存，其中包括局部变量、线程调用的每个方法的参数和返回值。其它线程无法读取到该栈内存块中的数据。栈中的数据仅限于基本类型和对象引用。&lt;/p&gt;
&lt;p&gt;在JVM中，堆内存是所
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>lombok</title>
    <link href="https://hsb786.github.io/2018/04/08/lombok/"/>
    <id>https://hsb786.github.io/2018/04/08/lombok/</id>
    <published>2018-04-08T08:23:41.000Z</published>
    <updated>2018-04-09T12:52:45.148Z</updated>
    
    <content type="html"><![CDATA[<p>通过使用@Data注解自动帮你生成getters,setters,toString(),equals(),hashCode()方法</p><p>@AllArgsConstructor 全参构造函数</p><p>@NoArgsConstructor 无参构造函数</p><p><img src="https://github.com/hsb786/DOC/blob/master/files/img/lombok.png" alt="Data"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过使用@Data注解自动帮你生成getters,setters,toString(),equals(),hashCode()方法&lt;/p&gt;
&lt;p&gt;@AllArgsConstructor 全参构造函数&lt;/p&gt;
&lt;p&gt;@NoArgsConstructor 无参构造函数&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NaN</title>
    <link href="https://hsb786.github.io/2018/04/08/NaN/"/>
    <id>https://hsb786.github.io/2018/04/08/NaN/</id>
    <published>2018-04-08T08:07:41.000Z</published>
    <updated>2018-04-09T12:52:52.999Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>NaN表示未定义或不可表示的指</strong>  </p><blockquote><p>A constant holding a Not-a-Number (NaN) value of type</p></blockquote><p><em>public static final double NaN = 0.0d /0.0;</em></p><p>Java中的Double和Float都有isNaN。判断一个数是不是NaN，通过v!=v的方式。</p><p>NaN是唯一与自己不相等的指，NaN与任何值都不相等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;NaN表示未定义或不可表示的指&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A constant holding a Not-a-Number (NaN) value of type&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;e
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VSCode快捷键</title>
    <link href="https://hsb786.github.io/2018/04/08/VSCodeQuickKey/"/>
    <id>https://hsb786.github.io/2018/04/08/VSCodeQuickKey/</id>
    <published>2018-04-08T07:58:41.000Z</published>
    <updated>2018-04-09T12:23:11.149Z</updated>
    
    <content type="html"><![CDATA[<p>ctrl B               侧边栏显/隐<br>ctrl shift E        资源管理器<br>ctrl tab            文件切换<br>F1或ctrl shift p 命令窗口</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ctrl B               侧边栏显/隐&lt;br&gt;ctrl shift E        资源管理器&lt;br&gt;ctrl tab            文件切换&lt;br&gt;F1或ctrl shift p 命令窗口&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git命令</title>
    <link href="https://hsb786.github.io/2018/04/08/gitCommand/"/>
    <id>https://hsb786.github.io/2018/04/08/gitCommand/</id>
    <published>2018-04-08T07:42:41.000Z</published>
    <updated>2018-04-09T12:23:19.690Z</updated>
    
    <content type="html"><![CDATA[<p><strong>git命令</strong></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;git命令&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>markdown</title>
    <link href="https://hsb786.github.io/2018/04/08/markdown/"/>
    <id>https://hsb786.github.io/2018/04/08/markdown/</id>
    <published>2018-04-08T04:31:41.000Z</published>
    <updated>2018-04-09T12:16:49.290Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Markdown结合VSCode来使用</strong><br><em>斜体</em><br><del>删除线</del></p><hr><p>分割</p><hr><p><a href="baidu.com">baidu</a></p><blockquote><p>引用</p><ul><li>演示列表<ul><li>列表还可以有层级</li></ul></li></ul></blockquote><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="1-1节"><a href="#1-1节" class="headerlink" title="1.1节"></a>1.1节</h2><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol><li>wfe</li><li>fwef</li></ol><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th>header1</th><th>header 2</th></tr></thead><tbody><tr><td>row 1 col 1</td><td>哈哈 <br> 换行</td></tr><tr><td>row 2 col 1</td><td>哈哈</td></tr></tbody></table><p>我的邮箱：<a href="mailto:&#55;&#56;&#54;&#x33;&#x39;&#x38;&#55;&#57;&#x38;&#64;&#113;&#x71;&#x2e;&#99;&#x6f;&#109;" target="_blank" rel="noopener">&#55;&#56;&#54;&#x33;&#x39;&#x38;&#55;&#57;&#x38;&#64;&#113;&#x71;&#x2e;&#99;&#x6f;&#109;</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块</span><br></pre></td></tr></table></figure><p><img src="https://github.com/hsb786/DOC/blob/master/files/img/Markdown.png" alt="Markdown"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Markdown结合VSCode来使用&lt;/strong&gt;&lt;br&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;br&gt;&lt;del&gt;删除线&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;分割&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;baidu.com&quot;&gt;baidu&lt;/a&gt;&lt;/p&gt;
&lt;block
      
    
    </summary>
    
    
  </entry>
  
</feed>
